import * as THREE from 'three';
import {
    setupMouseControls,
    setupAutoRotate,
    setupModelFlying
} from '../utils/three.js/animate'
import ThreeDemo from '../utils/three.js/init'
import {
    createDefaultPhysicsWorld,
    createGround,
    createCube,
    createSphere,
    addPhysicsForModel,
    configureContactMaterials
} from '../utils/three.js/physics'

import {
    addFireWork,
    addStars,
} from '../utils/three.js/effect'
import {
    getRandomColor
} from '../utils/common';

import {
    loadTexturesFromAtlas,
    useGltfLoader
} from '../utils/three.js/loader'

/**
 * 创建一个简单的物理模拟场景
 * @param {Object} demo - 包含场景、相机和渲染器的对象
 */
async function addPhysicsTest(demo, world) {
    const {
        scene,
        camera,
        renderer
    } = demo

    //添加地面
    const {
        groundBody,
        groundMesh,
        groundPhysMat
    } = createGround()
    world.addBody(groundBody);
    scene.add(groundMesh);
    /********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************** */
    //添加立方体
    const {
        cubeBody,
        cubeMesh,
        cubePhysMat
    } = createCube()

    world.addBody(cubeBody);
    scene.add(cubeMesh);
    /********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************** */
    // 添加球体
    const {
        sphereMesh,
        sphereBody,
        spherePhysMat
    } = createSphere({
        radius: 0.5, // 半径增大
        position: new THREE.Vector3(0, 5, 5), // 改变初始位置
        color: 0x0000ff, // 改变颜色为红色
    });
    world.addBody(sphereBody);
    scene.add(sphereMesh);

    //添加飞机
    const loadGltfModelFunc = useGltfLoader()
    const planeModel = await loadGltfModelFunc('src/model/gltf/plane.gltf', [-5, 10, -5], [0.25, 0.25, 0.25])
    const {
        gltfBody: planeGltfBody,
        gltfBodyMaterial: planeGltfBodyMaterial
    } = addPhysicsForModel(planeModel, {}, 1)
    demo.scene.add(planeModel);
    world.addBody(planeGltfBody);
    // setupModelFlying(demo, planeModel, planeGltfBody)
    //添加房子
    const houseModel = await loadGltfModelFunc('src/model/gltf/littlest-tokyo.glb', [0, 2.2, 0], [0.01, 0.01, 0.01])
    const {
        gltfBody: houseGltfBody,
        gltfBodyMaterial: houseGltfBodyMaterial
    } = addPhysicsForModel(houseModel)
    demo.scene.add(houseModel);
    world.addBody(houseGltfBody);

    // 渲染一个带多贴图的浮旋立方体
    const {
        cubeBody: floatCubeBody,
        cubeMesh: floatCubeMesh,
        cubePhysMat: floatCubePhysMat
    } = createCube({
        size: 3,
        position: new THREE.Vector3(0, 8, 0),
        mass: 0
    }, )
    const textures = await loadTexturesFromAtlas('src/image/textures/', 6);
    // 创建一个材质数组，每个材质对应一个从纹理图集加载的贴图
    floatCubeMesh.material = textures.map(texture => new THREE.MeshBasicMaterial({
        map: texture
    }));
    setupAutoRotate(floatCubeMesh);
    demo.scene.add(floatCubeMesh);
    world.addBody(floatCubeBody);

    // 鼠标点击事件处理
    let ballBodies = [];
    /**
     * 当鼠标在渲染器的dom元素上按下时的事件监听器。
     * 该函数主要负责在地面位置创建一个物理球体，并将其同时渲染为一个视觉球体。
     * 
     * @param {MouseEvent} event 鼠标事件对象，包含了鼠标按下的详细信息。
     */
    renderer.domElement.addEventListener('mousedown', (event) => {
        // 当鼠标左键按下时
        if (event.button === 0) {
            const {
                sphereBody: ballBody,
                sphereMesh: ballMesh,
                spherePhysMat: ballPhysMat
            } = createSphere({
                radius: 0.5,
                position: new THREE.Vector3(),
                color: getRandomColor()
            });

            // 使用Three.js的Raycaster来计算鼠标位置和场景中物体的交点
            const raycaster = new THREE.Raycaster();
            raycaster.setFromCamera(
                new THREE.Vector2((event.clientX / window.innerWidth) * 2 - 1, -(event.clientY / window.innerHeight) * 2 + 1),
                camera
            );
            // 检测鼠标点击是否与地面相交
            const intersections = raycaster.intersectObject(groundMesh);
            if (intersections.length > 0) {
                // 如果相交，将球体位置设置为相交点位置
                ballBody.position.copy(intersections[0].point);
            } else {
                console.log("No intersection with the ground."); // 如果没有相交，打印错误信息并返回
                return;
            }
            // 将物理球体添加到物理世界
            ballBodies.push(ballBody); // 将球体添加到球体数组
            world.addBody(ballBody);
            scene.add(ballMesh); // 将网格模型添加到场景中
            ballMesh.userData.cannonBody = ballBody; // 将物理球体与网格模型关联
        }
    });
    /**
     * 该函数用于实现动画循环。
     * 它通过调用requestAnimationFrame来递归自身，以在每一帧中更新物理世界的状态，并将物理模拟的结果应用到场景中的图形网格。
     */
    function animate() {
        // 请求下一帧动画
        requestAnimationFrame(animate);
        // 更新物理世界的状态
        world.step(1 / 60); // 步进物理模拟，参数为时间步长
        // 遍历球体集合，更新每个球体网格的位置和旋转，以匹配其对应的物理体状态
        ballBodies.forEach((body, index) => {
            // 查找场景中与当前物理体对应的网格
            const mesh = scene.children.find(child => child.userData.cannonBody === body);
            if (mesh) {
                // 如果找到，更新网格的位置和旋转
                mesh.position.copy(body.position);
                mesh.quaternion.copy(body.quaternion);
            }
        });
    }

    animate();
}

// 示例用法
const demo = new ThreeDemo({
    isAddAxesHelper: false,
    // isAddGridHelper: false,
    isAddCameraHelper: false,
    // isSetUpGUI: false,
    // isSetUpControls: false
});
const world = createDefaultPhysicsWorld()
addPhysicsTest(demo, world)
addFireWork(demo)
// 添加一定数量的星星
addStars(demo, 1000); // 数量根据实际情况调整