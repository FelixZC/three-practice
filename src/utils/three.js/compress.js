import*as THREE from"three";import GUI from"lil-gui";import WebGL from"three/addons/capabilities/WebGL.js";import{OrbitControls}from"three/addons/controls/OrbitControls.js";import Stats from"three/addons/libs/stats.module.js";import{RoomEnvironment}from"three/addons/environments/RoomEnvironment.js";export default class ThreeDemo{constructor(containerId="container"){this.container=document.getElementById(containerId);this.width=window.innerWidth;this.height=window.innerHeight;this.aspectRatio=this.width/this.height;this.devicePixelRatio=window.devicePixelRatio;this.scene=null;this.camera=null;this.light=null;this.renderer=null;this.stats=new Stats;this.controls=null;this.config={isSetUpControls:true,isAddAxesHelper:true,isAddGridHelper:true,isAddCameraHelper:true,isSetUpGUI:true};if(!WebGL.isWebGLAvailable()){const warning=WebGL.getWebGLErrorMessage();this.container.appendChild(warning);throw new Error("WebGL is not available.")}}setUpGUI(){this.gui=new GUI;const lightColorController=this.gui.addColor(this.directionalLight,"color").name("Directional Light Color");lightColorController.onChange(value=>{this.directionalLight.color.set(value)});const lightIntensityController=this.gui.add(this.directionalLight,"intensity",0,5).step(.1).name("Directional Light Intensity");lightIntensityController.onChange(value=>{this.directionalLight.intensity=value});const fogColorController=this.gui.addColor(this.scene.fog,"color").name("Fog Color");fogColorController.onChange(value=>{this.scene.fog.color.set(value)});const fogRangeController=this.gui.add(this.scene.fog,"near",0,.5).step(.1).name("Fog Near");fogRangeController.onChange(value=>{this.scene.fog.near=value});const fogFarController=this.gui.add(this.scene.fog,"far",0,1e3).step(1).name("Fog Far");fogFarController.onChange(value=>{this.scene.fog.far=value})}addAxesHelper(size=5){const axesHelper=new THREE.AxesHelper(size);this.scene.add(axesHelper)}addGridHelper(size=100,divisions=10){const gridHelper=new THREE.GridHelper(size,divisions);this.scene.add(gridHelper)}addPlaneHelper(plane,size=1,hexColor1=16776960,hexColor2=255){const planeHelper=new THREE.PlaneHelper(plane,size,hexColor1,hexColor2);this.scene.add(planeHelper)}addPointLightHelper(light,sphereSize=.75){const pointLightHelper=new THREE.PointLightHelper(light,sphereSize);this.scene.add(pointLightHelper)}addSpotLightHelper(light,sphereSize=.5){const spotLightHelper=new THREE.SpotLightHelper(light,sphereSize);this.scene.add(spotLightHelper)}addDirectionalLightHelper(light,size=1){const directionalLightHelper=new THREE.DirectionalLightHelper(light,size);this.scene.add(directionalLightHelper)}addCameraHelper(camera){const cameraHelper=new THREE.CameraHelper(camera);this.scene.add(cameraHelper)}handleWindowResize(){window.addEventListener("resize",()=>{this.camera.aspect=window.innerWidth/window.innerHeight;this.camera.updateProjectionMatrix();this.renderer.setSize(window.innerWidth,window.innerHeight)})}setUpRenderer(){this.renderer=new THREE.WebGLRenderer({antialias:true});this.renderer.outputEncoding=THREE.sRGBEncoding;this.renderer.setSize(this.width,this.height);this.renderer.setPixelRatio(this.devicePixelRatio);this.renderer.setClearColor(this.scene.fog.color)}setUpStats(){this.container.appendChild(this.stats.dom)}setUpCamera(){this.camera=new THREE.PerspectiveCamera(90,this.aspectRatio,.1,100);this.camera.position.set(5,2,8);this.camera.aspect=this.aspectRatio;this.camera.updateProjectionMatrix();this.scene.add(this.camera)}setUpLighting(){this.light=new THREE.AmbientLight(4210752);this.directionalLight=new THREE.DirectionalLight(16777215,.6);this.directionalLight.position.set(0,5,5);this.scene.add(this.light);this.scene.add(this.directionalLight)}async setUpControls(){this.controls=new OrbitControls(this.camera,this.renderer.domElement);this.controls.enableDamping=true;this.controls.dampingFactor=.05;this.controls.enableZoom=true}async setUpEnvironment(){const pmremGenerator=new THREE.PMREMGenerator(this.renderer);this.scene.environment=pmremGenerator.fromScene(new RoomEnvironment(this.renderer),.04).texture}setUpScene(){this.scene=new THREE.Scene;this.scene.fog=new THREE.Fog(592152,1,600)}animate(){requestAnimationFrame(()=>{this.controls.update();this.stats.update();this.renderer.render(this.scene,this.camera);this.animate()})}async init(config){if(config){this.config=config}if(!WebGL.isWebGLAvailable()){return}this.setUpScene();this.setUpCamera();this.setUpLighting();this.setUpRenderer();if(this.config.isSetUpControls){await this.setUpControls()}if(this.config.isAddAxesHelper){await this.addAxesHelper()}if(this.config.isAddGridHelper){this.addGridHelper(200,20)}if(this.config.isAddCameraHelper){this.addCameraHelper(this.camera)}if(this.config.isSetUpGUI){this.setUpGUI()}this.handleWindowResize();this.setUpStats();this.setUpEnvironment();this.animate();this.container.appendChild(this.renderer.domElement)}}